apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'sonar'
apply plugin: 'maven'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// For cobertura
def cobSerFile = "${project.buildDir}/reports/tests/cobertura.ser"
def srcOriginal = "${sourceSets.main.classesDir}"
def srcCopy = "${srcOriginal}-copy"
// System property to activate test coverage during test execution
// (de-activated by default)
def COVERAGE_SYS_PROPERTY = "test.coverage.activated"
// Set this to false to generate a war file
// TODO: implement the war file related build ?
// Useless property (for the moment...)
def STANDALONE_PACKAGING = true
// Root directory on demo environnment, where will be hosted every targetEnvironnment directories
def ENV_DEMO_DEPLOY_ROOT_PATH = "/home/todos/dist";
// Demo connection properties
def ENV_DEMO_HOST = '91.121.39.83'
def ENV_DEMO_USER = "todos"
def ENV_DEMO_PASS = "4SHtofr"
def ENV_DEMO_PORT = 2225
// System property used to define target execution environnment used for deployment
// See ENV_PROPERTIES map for the possible values to set in this system property
def TARGET_ENV_SYS_PROPERTY = "deploy.target.env"

if(!hasProperty("releasesRepoUsername")
        || !hasProperty("releasesRepoPassword")){
    ant.fail "You should define a ~/.gradle/gradle.properties containing properties 'releasesRepoUsername' and 'releasesRepoPassword' to access 4SH releases repository !"
}

org.apache.ivy.util.url.CredentialsStore.INSTANCE.addCredentials("Artifactory Realm", "repo.4sh.fr", releasesRepoUsername, releasesRepoPassword);


def ENV_PROPERTIES = [
   nightly: [
           targetDir: ENV_DEMO_DEPLOY_ROOT_PATH+"/nightly",
           todosPort: 18086
   ], qa: [
           targetDir: ENV_DEMO_DEPLOY_ROOT_PATH+"/qa",
           todosPort: 28086
   ]
]

group = "fr.4sh.todos"
def versionBase = "0.1"

// handles releases gracefully
gradle.taskGraph.whenReady {taskGraph ->
   if (taskGraph.hasTask(':release')) {
      version = versionBase
   } else {
      version = versionBase + '-SNAPSHOT'
   }
    jar {
      manifest {
        attributes 'Main-Class': 'fr.fsh.todos.Main'
        attributes 'Implementation-Title': 'TODOs'
        attributes 'Implementation-Version': version
        attributes 'Implementation-Vendor': '4SH France'
      }
    }
}

repositories {
    // looking into maven local repo only if localRepo system property is set to true
    // Will be useful to test snapshot deps (like jewas) which are not yet deployed on artifactory...
    if(System.properties["localRepo"] == true){
        mavenLocal()
    }
    mavenRepo(urls: "http://repo.4sh.fr/libs-release/")
    mavenRepo(urls: "http://repo.4sh.fr/libs-snapshot/")
    mavenRepo urls: ["http://oss.sonatype.org/content/repositories/releases/"]
}

configurations {
    intTestCompile { extendsFrom testCompile }
    intTestRuntime { extendsFrom intTestCompile, runtime }
    ssh
    deployerJars
}

dependencies {
    compile(group: 'fr.4sh.jewas', name: 'jewas', version: '0.1-SNAPSHOT', transitive: true){ changing = true }
    compile(
            [group: 'com.beust', name:'jcommander', version: '1.17', transitive: true]
    )
    testCompile(
            [group: 'junit', name: 'junit', version: '4.8.2', transitive: true],
            [group: 'com.jayway.restassured', name: 'rest-assured', version: '1.2.1']
    )
    testRuntime 'net.sourceforge.cobertura:cobertura:1.9.4.1'
    ssh 'org.apache.ant:ant-jsch:1.7.0'
    // to use WebDav protocol on upload
    deployerJars "org.apache.maven.wagon:wagon-webdav-jackrabbit:1.0"
}

sourceSets {
    intTest {
        compileClasspath = sourceSets.main.classes + configurations.intTestCompile
        runtimeClasspath = classes + sourceSets.main.classes + configurations.intTestRuntime
        java {
            srcDir "src/integration-test/java"
        }
        resources {
            srcDir "src/integration-test/resources"
        }
    }
}

// Allows to generate USER_HOME idea variable uniformely on every OS
ideaModule {
    variables.put("USER_HOME", file(System.getProperty("user.home")))
}

if(STANDALONE_PACKAGING){
    jar {
      // Convert every jars in a fatjar
      from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }

    sourceSets{
        main {
            resources {
                srcDir "src/main/java"
                srcDir "src/main/webapp"
            }
        }
    }
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
   from javadoc.destinationDir
   classifier = 'javadoc'
}

task packageSources(type: Jar) {
   from sourceSets.main.allSource
   classifier = 'sources'
}
artifacts {
   archives(packageJavadoc) {
      type = 'javadoc'
      extension = 'jar'
   }
   archives(packageSources)
}

uploadArchives {
   repositories {
      deployer = mavenDeployer {
        // you might use this configuration not to generate
        // date based artefact names
        // uniqueVersion = false
        configureAuth = {
           authentication(userName: releasesRepoUsername, password: releasesRepoPassword)
        }
        configuration = configurations.deployerJars
        snapshotRepository(url: "dav:http://repo.4sh.fr/libs-snapshot-local", configureAuth)
        repository(url: "dav:http://repo.4sh.fr/libs-release-local/", configureAuth)
      }
   }
}

task checkPropsForDeployment << {
    if(System.properties[TARGET_ENV_SYS_PROPERTY] == null
            || !ENV_PROPERTIES.containsKey(System.properties[TARGET_ENV_SYS_PROPERTY])){
        throw new IllegalArgumentException("You should define <"+TARGET_ENV_SYS_PROPERTY+"> system property !")
    }
}

task initSsh << {
    ant.taskdef(name: 'scp2',
    	classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
    	classpath: configurations.ssh.asPath)
    ant.taskdef(name: 'ssh',
    	classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
    	classpath: configurations.ssh.asPath)
}

task uploadOnDemo(dependsOn: [initSsh, checkPropsForDeployment, test, build]) << {
    def deployDirectory = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].targetDir

	println "Deploying TODOs to $deployDirectory"

    def libFiles = file(libsDir).listFiles().findAll { it =~ "\\.jar\$" }
    libFiles.each { File f ->
        println "Uploading ${f.name} (${f.size()/1000000} Mo) ..."

        ant.scp2(file: f,
                remoteTofile: "${ENV_DEMO_USER}:${ENV_DEMO_PASS}@${ENV_DEMO_HOST}:${deployDirectory}/todos.jar",
                port: ENV_DEMO_PORT,
                trust: true,
                verbose: true
        )
    }
}

task startTODOS(dependsOn: [initSsh, checkPropsForDeployment]) << {
    def deployDirectory = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].targetDir
    def executionPort = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].todosPort

    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: ENV_DEMO_PORT,
		command: """kill -9 \$(cat "${deployDirectory}/todos.pid")""", trust: true, failonerror: false)
    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: ENV_DEMO_PORT,
		command: """/usr/lib/jvm/jdk1.7.0/jre/bin/java -Dfile.encoding=UTF-8 -jar "${deployDirectory}/todos.jar" \
		    -httpPort ${executionPort} \
		    > "${deployDirectory}/todos.log" 2> "${deployDirectory}/todos.err.log" \
		    & echo \$! > "${deployDirectory}/todos.pid" """,
        trust: true, failonerror: true)
}

task intTest(type: Test) {
    testClassesDir = sourceSets.intTest.classesDir
    classpath = sourceSets.intTest.runtimeClasspath
}

task initializeIntTestContext << {
    ant.echo "TODO: do things here !"
}
intTestClasses.dependsOn initializeIntTestContext

// For cobertura ...
if ("true".equals(System.getProperty(COVERAGE_SYS_PROPERTY))) {
    gradle.taskGraph.beforeTask { task ->
        if (task == test) {
            ant {
                // delete data file for cobertura, otherwise coverage would be added
                delete(file: cobSerFile, failonerror: false)
                // delete copy of original classes
                delete(dir: srcCopy, failonerror: false)
                // import cobertura task, so it is available in the script
                taskdef(resource: 'tasks.properties', classpath: configurations.testRuntime.asPath)
                // create copy (backup) of original class files
                copy(todir: srcCopy) {
                    fileset(dir: srcOriginal)
                }
                // instrument the relevant classes in-place
                'cobertura-instrument'(datafile: cobSerFile) {
                    fileset(dir: srcOriginal,
                            includes: "**/*.class")
                }
            }
        }
    }

    gradle.taskGraph.afterTask { task ->
        if (task == test && new File(srcCopy).exists()) {
            // replace instrumented classes with backup copy again
            ant {
                delete(file: srcOriginal)
                move(file: srcCopy,
                        tofile: srcOriginal)
            }
            // create cobertura reports
            ant.'cobertura-report'(destdir: "${project.buildDirName}/reports/tests/",
                    format: 'xml', srcdir: "src/main/java", datafile: cobSerFile)
        }
    }

    test {
        ignoreFailures = true
        systemProperties["net.sourceforge.cobertura.datafile"] = cobSerFile
    }
}

sonar {
    serverUrl = "http://sonar.4sh.fr"

    globalProperty "sonar.jdbc.url", "jdbc:mysql://sonar:3306/sonar"
    globalProperty "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
    globalProperty "sonar.jdbc.username", "sonar"
    globalProperty "sonar.jdbc.password", "4SHsoar"

    globalProperty "sonar.java.source", "1.7"
    globalProperty "sonar.java.target", "1.7"
}