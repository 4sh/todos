package fr.fsh.todos;

import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;

import java.net.MalformedURLException;
import java.util.Arrays;
import java.util.Collection;
import java.util.NoSuchElementException;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;

/**
 * @author fcamblor
 */
@RunWith(value = Parameterized.class)
public class SimpleUITest {

    private WebDriver driver = null;
    private DesiredCapabilities testCapability;
    // I really don't like this pattern but heh, that's what is generated by selenium IDE
    private StringBuffer verificationErrors;

    @Parameterized.Parameters
    public static Collection data(){
        DesiredCapabilities ie6Capabilities = DesiredCapabilities.internetExplorer();
        ie6Capabilities.setVersion("6");
        return Arrays.asList(new Object[][]{
                //{ DesiredCapabilities.chrome() },
                //{ DesiredCapabilities.iphone() },
                { ie6Capabilities },
                { DesiredCapabilities.firefox() }
        });
    }

    public SimpleUITest(DesiredCapabilities cap){
        this.testCapability = cap;
    }

    @Before
    public void setup(){
        this.verificationErrors = new StringBuffer();
    }

    @After
    public void tearDown(){
        try {
            String verificationErrorString = verificationErrors.toString();
            if (!"".equals(verificationErrorString)) {
                fail(verificationErrorString);
            }
        }finally{
            if(driver != null){
                driver.quit();
            }
        }
    }

    // I don't like this either ... but it was potentially needed by selenium ide generated code :(
    private boolean isElementPresent(By by) {
		try {
			driver.findElement(by);
			return true;
		} catch (NoSuchElementException e) {
			return false;
		}
	}

    //@Ignore("Useless test 'til step 3")
    @Test
    public void shouldSelectTaskNotDoneDisplayUncheckedCheckbox() throws MalformedURLException {
        driver = WebDriverTestHelper.createWebDriver("Select task not done", this.testCapability);

        // copy / pasted code goes here
        // when in state
        driver.findElement(By.xpath("//tr[@id='task1']//td[.='My task 1']")).click();
        if (!driver.findElement(By.id("checkTask")).isSelected()) {
            driver.findElement(By.id("checkTask")).click();
        };
        try {
            assertTrue(driver.findElement(By.id("checkTask")).isSelected());
        } catch (Error e) {
            verificationErrors.append(e.toString());
        }
        driver.findElement(By.xpath("//tr[@id='task2']//td[.='My task 2']")).click();
        try {
            assertFalse(driver.findElement(By.id("checkTask")).isSelected());
        } catch (Error e) {
            verificationErrors.append(e.toString());
        }
        driver.findElement(By.xpath("//tr[@id='task1']//td[.='My task 1']")).click();
        try {
            assertTrue(driver.findElement(By.id("checkTask")).isSelected());
        } catch (Error e) {
            verificationErrors.append(e.toString());
        }


        // Pour tests...
//        Selenium selenium = new WebDriverBackedSelenium(driver, WebDriverTestHelper.getBaseUrl());
//        selenium.open("/");
//        selenium.waitForPageToLoad("60000");
//
//        // Switch & select task 3
//        selenium.click("xpath=//tr[@id='task3']//td[@class='title']");
//        verifyFalse(selenium.isChecked("id=checkTask"));
//        selenium.click("id=checkTask");
//        verifyTrue(selenium.isChecked("id=checkTask"));
//
//        // Switch to task 2 : checkbox should not be selected
//        selenium.click("xpath=//tr[@id='task2']//td[@class='title']");
//        verifyFalse(selenium.isChecked("id=checkTask"));
//
//        // Back to task 3 : checkbox should be selected !
//        selenium.click("xpath=//tr[@id='task3']//td[@class='title']");
//        verifyTrue(selenium.isChecked("id=checkTask"));

        System.out.println(driver.getTitle());
    }

    @Ignore("Useless for the demo ... but good example for using selenium 2 !")
    @Test
    public void shouldSelectAndUnselectChangeTitleClass() throws MalformedURLException {

        this.driver = WebDriverTestHelper.createWebDriver("Selecting & unselecting radio button", this.testCapability);

        // Asserting initial state
        assertThat(driver.findElements(By.cssSelector("tr.task")).size(), is(equalTo(3)));
        assertThat(driver.findElements(By.cssSelector("tr.task.done")).size(), is(equalTo(0)));

        driver.findElement(By.cssSelector("tr#task3 > td.title")).click();
        driver.findElement(By.cssSelector("tr#task2 > td.title")).click();
        driver.findElement(By.cssSelector("tr#task1 > td.title")).click();

        driver.findElement(By.cssSelector("#checkTask")).click();

        assertThat(driver.findElements(By.cssSelector("tr.task.done")).size(), is(equalTo(1)));
        assertThat(driver.findElements(By.cssSelector("tr#task1.done")).size(), is(equalTo(1)));

        driver.findElement(By.cssSelector("#checkTask")).click();

        assertThat(driver.findElements(By.cssSelector("tr.task.done")).size(), is(equalTo(0)));

        System.out.println(driver.getTitle());
    }

    @Ignore("Useless for the demo ... but good example for using selenium 2 !")
    @Test
    public void shouldAddTaskButtonEffectivelyAddsANewTask() throws MalformedURLException {

        this.driver = WebDriverTestHelper.createWebDriver("Adding task", this.testCapability);

        assertThat(driver.findElements(By.cssSelector("tr.task")).size(), is(equalTo(3)));
        assertThat(driver.findElements(By.cssSelector("tr.task.done")).size(), is(equalTo(0)));

        assertThat(driver.findElements(By.cssSelector("tr#task4")).size(), is(equalTo(0)));

        driver.findElement(By.cssSelector("#newTaskTitle")).sendKeys("My task 4");
        driver.findElement(By.cssSelector("#newTask")).click();

        assertThat(driver.findElements(By.cssSelector("tr.task")).size(), is(equalTo(4)));
        assertThat(driver.findElements(By.cssSelector("tr#task4")).size(), is(equalTo(1)));
        assertThat(driver.findElement(By.cssSelector("tr#task4 > td.title")).getText(), is(equalTo("My task 4")));

        System.out.println(driver.getTitle());
    }
}